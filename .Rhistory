??ames
library(tidymodels)
ames
glimpse(ames)
Lp <- function(x,y, p) {
if(!is.numeric(x) || !is.numeric(y)) {
stop("x and y are not numeric!")
}
if(!is.numeric(p)) {
stop("p is non-numeric!")
} else {
if(p <= 0) {
stop("p is not positive!")
}
}
sum(abs(x-y)^p)^(1/p)
}
x<- c(0,1)
y<- c(1,0)
Lp(x,y, 2)
Lp('a',y,2)
Lp(c(0,0), c(1/2, sqrt(3)/2), 2)
seq(1, 2, 100)
x <- rnorm(10)
x
reasons_all_passed <- "all_passed"
reasons <- reasons_all_passed
c(c(1,2), c(3,4))
c(c(1,2), c(3,4))[2]
xs <- list(1 = xnorm,
xs <- list("1" = xnorm,
"2" = ynorm,
"3" = xint,
"4" = yint)
xnorm <- rnorm(1000)
ynorm <- rnorm(1000)
xint <- 1:1000
yint <- 1:1000
xs <- list("1" = xnorm,
"2" = ynorm,
"3" = xint,
"4" = yint)
d <- Lp
is_norm <- 1
reasons_all_passed <- "all_passed"
reasons <- reasons_all_passed
for(name in names(x)) {
d(xs[name],xs[name])
}
for(name in names(xs)) {
d(xs[name],xs[name])
}
d(xs[[name]],xs[[name]])
for(name in names(xs)) {
d(xs[[name]],xs[[name]])
}
Lp <- function(x,y, p=2) {
#tests for Lp
if(!is.numeric(x)) {
stop("x is not numeric!")
}
if(!is.numeric(y)) {
stop("y is not numeric!")
}
if(length(x) != length(y)) {
stop("x and y have different sizes!")
}
if(length(x) < 1) {
stop("x length less than 1")
}
if(length(y) < 1) {
stop("y length less than 1")
}
if(!is.numeric(p)) {
stop("p is non-numeric!")
} else {
if(p <= 0) {
stop("p is not positive!")
}
}
sum(abs(x-y)^p)^(1/p)
}
for(name in names(xs)) {
d(xs[[name]],xs[[name]])
}
Lp <- function(x,y, p=2) {
#tests for Lp
if(!is.numeric(x)) {
stop("x is not numeric!")
}
if(!is.numeric(y)) {
stop("y is not numeric!")
}
if(length(x) != length(y)) {
stop("x and y have different sizes!")
}
if(length(x) < 1) {
stop("x length less than 1")
}
if(length(y) < 1) {
stop("y length less than 1")
}
if(!is.numeric(p)) {
stop("p is non-numeric!")
} else {
if(p <= 0) {
stop("p is not positive!")
}
}
sum(abs(x-y)^p)^(1/p)
}
d <- Lp
for(name in names(xs)) {
d(xs[[name]],xs[[name]])
}
name in names(xs)
names(xs)
xs[["1"]]
for(name in names(xs)) {
x <- xs[[name]]
print(d(x,x) == 0)
}
for(name in names(xs)) {
print(d(xs[[name]],xs[[name]]) == 0)
}
sapply(xs, functoin(x) d(x,x) == 0)
sapply(xs, function(x) d(x,x) == 0)
sum(sapply(xs, function(x) d(x,x) != 0))
if(sum(sapply(xs, function(x) d(x,x) != 0))) {
is_norm <- 0
if(reasons == reasons_all_passed) {
reasons <- "non-zero self-norm"
} else {
reasons <- c(reasons, "non-zero self-norm")
}
}
M <- tibble(
x1 <- rnorm(100, 10, 10),
x2 <- rnorm(100, 4, 3),
x3 <- rnorm(100, -2, 7)
)
sapply(M, function(col) mean(col))
M <- tibble(
x1 = rnorm(100, 10, 10),
x2 = rnorm(100, 4, 3),
x3 = rnorm(100, -2, 7)
)
sapply(M, function(col) mean(col))
means <- sapply(M, function(col) mean(col, na.rm = T))
sds <- sapply(M, function(col) sd(col, na.rm = T))
M2 <- M %>% as.matrix()
means <- sapply(M2, function(col) mean(col, na.rm = T))
means
means <- sapply(M, function(col) mean(col, na.rm = T))
sds <- sapply(M, function(col) sd(col, na.rm = T))
M <- tibble(
x1 = rnorm(100, 10, 10),
x2 = rnorm(100, 4, 3),
x3 = rnorm(100, -2, 7)
)
M <- M %>% as.matrix()
if(is.matrix(M)) {
column_means <- colMeans(M, na.rm = T)
column_sds <- apply(M, MARGIN = 2, FUN = sd, na.rm = T)
}
rnorm(10000) %>% as.matrix() -> Mrand
Mrand
rnorm(100) %>% as.matrix() -> Mrand
Mrand
matrix(rnorm(100), nrow = 10)
Mrand <- matrix(rnorm(100), nrow = 10)
column_means <- colMeans(Mrand)
for(i in 1:ncol(Mrand)) {}
for(i in 1:ncol(Mrand)) {
Mrand <- matrix(rnorm(100, mean = 10, sd = 10), nrow = 10)
normalize <- Mrand
for(i in 1:ncol(Mrand)) {
normalize[,i] <- normalize[,i] - colMeans(Mrand)[i]
}
colMeans(normalize)
normalize_and_center <- function(M) {
if(is.matrix(M)) {
column_means <- colMeans(M, na.rm = T)
column_sds <- apply(M, MARGIN = 2, FUN = sd, na.rm = T)
} else if(is.tibble(M) || is.data.frame(M)) {
column_means <- sapply(M, function(col) mean(col, na.rm = T))
column_sds <- sapply(M, function(col) sd(col, na.rm = T))
}
normalized <- M
for(i in 1:ncol(M)) {
normalized[,i] <- (normalized[,i] - column_means[i])/column_sd[i]
}
return(list(normalized = normalized, column_means = column_means, column_sds = column_sds))
}
M <- tibble(
x1 = rnorm(100, 10, 10),
x2 = rnorm(100, 4, 3),
x3 = rnorm(100, -2, 7)
)
normalize_and_center(M)
normalize_and_center <- function(M) {
if(is.matrix(M)) {
column_means <- colMeans(M, na.rm = T)
column_sds <- apply(M, MARGIN = 2, FUN = sd, na.rm = T)
} else if(is_tibble(M) || is.data.frame(M)) {
column_means <- sapply(M, function(col) mean(col, na.rm = T))
column_sds <- sapply(M, function(col) sd(col, na.rm = T))
}
normalized <- M
for(i in 1:ncol(M)) {
normalized[,i] <- (normalized[,i] - column_means[i])/column_sd[i]
}
return(list(normalized = normalized, column_means = column_means, column_sds = column_sds))
}
M <- tibble(
x1 = rnorm(100, 10, 10),
x2 = rnorm(100, 4, 3),
x3 = rnorm(100, -2, 7)
)
normalize_and_center(M)
normalize_and_center <- function(M) {
if(is.matrix(M)) {
column_means <- colMeans(M, na.rm = T)
column_sds <- apply(M, MARGIN = 2, FUN = sd, na.rm = T)
} else if(is_tibble(M) || is.data.frame(M)) {
column_means <- sapply(M, function(col) mean(col, na.rm = T))
column_sds <- sapply(M, function(col) sd(col, na.rm = T))
}
normalized <- M
for(i in 1:ncol(M)) {
normalized[,i] <- (normalized[,i] - column_means[i])/column_sds[i]
}
return(list(normalized = normalized, column_means = column_means, column_sds = column_sds))
}
M <- tibble(
x1 = rnorm(100, 10, 10),
x2 = rnorm(100, 4, 3),
x3 = rnorm(100, -2, 7)
)
normalize_and_center(M)
all <- normalize_and_center(M)
sapply(all$normalized, function(col) mean(col, na.rm = T))
sapply(all$normalized, function(col) sd(col, na.rm = T))
xy <- tibble(
x = -5:5
y = -5:5
xy <- tibble(
x = -5:5,
y = -5:5
)
ggplot(xy, aes(x = x, y = y)) +
geom_point()
expand.grid(-1:1,-1:1)
expand_grid(-1:1,-1:1)
expand_grid(x=-1:1,y=-1:1)
xy <- expand_grid(
x= -5:5,
y= -5:5
)
ggplot(xy, aes(x = x, y = y)) +
geom_point()
test <- c(runif(2,-5, 5))
ggplot(xy, aes(x = x, y = y)) +
geom_point() +
geom_point(aes(x = test[1], y = test[2], color = "blue"))
ggplot(xy, aes(x = x, y = y)) +
geom_point() +
geom_point(aes(x = test[1], y = test[2]) color = "blue")
ggplot(xy, aes(x = x, y = y)) +
geom_point() +
geom_point(aes(x = test[1], y = test[2]), color = "blue")
ggplot(xy, aes(x = x, y = y)) +
geom_point() +
geom_point(aes(x = test[1], y = test[2]), size = 3, color = "blue")
test <- c(runif(2,-3, 3))
ggplot(xy, aes(x = x, y = y)) +
geom_point() +
geom_point(aes(x = test[1], y = test[2]), size = 3, color = "blue")
test <- c(runif(2,-3, 3))
ggplot(xy, aes(x = x, y = y)) +
geom_point() +
geom_point(aes(x = test[1], y = test[2]), size = 3, color = "blue")
normalize_and_center <- function(M) {
if(is.matrix(M)) {
column_means <- colMeans(M, na.rm = T)
column_sds <- apply(M, MARGIN = 2, FUN = sd, na.rm = T)
} else if(is_tibble(M) || is.data.frame(M)) {
column_means <- sapply(M, function(col) mean(col, na.rm = T))
column_sds <- sapply(M, function(col) sd(col, na.rm = T))
}
normalized <- M
for(i in 1:ncol(M)) {
normalized[,i] <- (normalized[,i] - column_means[i])/column_sds[i]
}
return(list(normalized = normalized, centers = column_means, deviations = column_sds))
}
knn(M, test, p, k = 3) {
knn <- function(M, test, p, k = 3) {
normalized_and_centered <- normalize_and_center(M)
Mn <- normalized_and_centered$normalized
centers <- normalized_and_centered$centers
deviations <- normalized_and_centered$deviations
test_normalized <- (test - centers)/deviations
if(is.matrix(M)) {
stop("matrix M not handled yet! come back soon :)")
}
distances <- c()
for(i in 1:nrow(Mn)) {
distances <- c(distances, Lp(Mn[i,], test, p))
}
return(Mn %>%
mutate(row_number = row_number(),
distances = distances) %>%
arrange(distances) %>%
slice_head(k) %>%
.$row_number)
}
knn(M= xy, test = test, p = 2, k = 3)
M = xy
test = test
p = 2
k = 3
normalized_and_centered <- normalize_and_center(M)
Mn <- normalized_and_centered$normalized
centers <- normalized_and_centered$centers
deviations <- normalized_and_centered$deviations
test_normalized <- (test - centers)/deviations
if(is.matrix(M)) {
stop("matrix M not handled yet! come back soon :)")
}
distances <- c()
for(i in 1:nrow(Mn)) {
distances <- c(distances, Lp(Mn[i,], test, p))
}
Mn[1,]
Mn[1,] %>% as.numeric()
for(i in 1:nrow(Mn)) {
distances <- c(distances, Lp(Mn[i,] %>% as.numeric(), test, p))
}
Mn %>%
mutate(row_number = row_number(),
distances = distances) %>%
arrange(distances) %>%
slice_head(k) %>%
.$row_number
Mn %>%
mutate(row_number = row_number(),
distances = distances) %>%
arrange(distances) %>%
slice_head(n = k) %>%
.$row_number
knn(M= xy, test = test, p = 2, k = 3)
knn <- function(M, test, p, k = 3) {
# M = xy
# test = test
# p = 2
# k = 3
normalized_and_centered <- normalize_and_center(M)
Mn <- normalized_and_centered$normalized
centers <- normalized_and_centered$centers
deviations <- normalized_and_centered$deviations
test_normalized <- (test - centers)/deviations
if(is.matrix(M)) {
stop("matrix M not handled yet! come back soon :)")
}
distances <- c()
for(i in 1:nrow(Mn)) {
distances <- c(distances, Lp(Mn[i,] %>% as.numeric(), test, p))
}
Mn %>%
mutate(row_number = row_number(),
distances = distances) %>%
arrange(distances) %>%
slice_head(n = k) %>%
.$row_number
}
knn(M= xy, test = test, p = 2, k = 3)
neighbor_indices <- knn(M= xy, test = test, p = 2, k = 3)
xy[neighbor_indices]
xy[neighbor_indices,]
ggplot(xy, aes(x = x, y = y)) +
geom_point() +
geom_point(aes(x = test[1], y = test[2]), size = 3, color = "blue") +
geom_point(data = xy[knn(M= xy, test = test, p = 2, k = 3),], aes(x = x, y = y), shape = 21, color = "blue", size = 3)
knn <- function(M, test, p, k = 3, normalize = T) {
# M = xy
# test = test
# p = 2
# k = 3
normalized_and_centered <- normalize_and_center(M)
Mn <- normalized_and_centered$normalized
centers <- normalized_and_centered$centers
deviations <- normalized_and_centered$deviations
test_normalized <- (test - centers)/deviations
if(is.matrix(M)) {
stop("matrix M not handled yet! come back soon :)")
}
distances <- c()
for(i in 1:nrow(Mn)) {
distances <- c(distances, Lp(Mn[i,] %>% as.numeric(), test_normalized, p))
}
Mn %>%
mutate(row_number = row_number(),
distances = distances) %>%
arrange(distances) %>%
slice_head(n = k) %>%
.$row_number
}
ggplot(xy, aes(x = x, y = y)) +
geom_point() +
geom_point(aes(x = test[1], y = test[2]), size = 3, color = "blue") +
geom_point(data = xy[knn(M= xy, test = test, p = 2, k = 3),], aes(x = x, y = y), shape = 21, color = "blue", size = 3)
geom_point(data = xy[knn(M= xy, test = test, p = 2, k = 3),], aes(x = x, y = y), color = "blue")
ggplot(xy, aes(x = x, y = y)) +
geom_point() +
geom_point(aes(x = test[1], y = test[2]), size = 3, color = "blue") +
geom_point(data = xy[knn(M= xy, test = test, p = 2, k = 3),], aes(x = x, y = y), shape = 21, color = "blue", size = 3) +
geom_point(data = xy[knn(M= xy, test = test, p = 2, k = 3),], aes(x = x, y = y), color = "blue")
test <- c(runif(2,-3, 3))
ggplot(xy, aes(x = x, y = y)) +
geom_point() +
geom_point(aes(x = test[1], y = test[2]), size = 3, color = "blue") +
geom_point(data = xy[knn(M= xy, test = test, p = 2, k = 3),], aes(x = x, y = y), shape = 21, color = "blue", size = 3) +
geom_point(data = xy[knn(M= xy, test = test, p = 2, k = 3),], aes(x = x, y = y), color = "blue")
knn <- function(M, test, p, k = 3, normalize = T) {
if(is.matrix(M)) {
stop("matrix M not handled yet! come back soon :)")
}
# M = xy
# test = test
# p = 2
# k = 3
if(normalize) {
normalized_and_centered <- normalize_and_center(M)
Mn <- normalized_and_centered$normalized
centers <- normalized_and_centered$centers
deviations <- normalized_and_centered$deviations
test_normalized <- (test - centers)/deviations
distances <- c()
for(i in 1:nrow(Mn)) {
distances <- c(distances, Lp(Mn[i,] %>% as.numeric(), test_normalized, p))
}
} else {
distances <- c()
for(i in 1:nrow(M)) {
distances <- c(distances, Lp(M[i,] %>% as.numeric(), test, p))
}
}
tibble(
row_number = 1:nrow(M),
distances = distances
) %>%
arrange(distances) %>%
slice_head(n = k) %>%
.$row_number %>%
return()
}
neighbor_indices <- knn(M= xy, test = test, p = 2, k = 3)
xy[neighbor_indices,]
